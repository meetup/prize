override def setup() {
  frameRate(40)
  textFont(loadFont("deja.vlw"))
  size(512, 512, OPENGL)
  loop()
}

object Meetup {
  import dispatch._
  import dispatch.json.Js
  import dispatch.json.JsHttp._
  import scala.collection.JavaConversions._
  
  val api_props = {
    val file = new java.io.FileInputStream(dataPath("api.properties"))
    val props = new java.util.Properties
    props.load(file)
    file.close()
    props
  }

  val http = new Http
  val req = :/("api.meetup.com") / "rsvps.json" <<? api_props
  val attendees = for {
    js <- http(req ># ('results ? (Js.list ! obj)))
    if ('response ! str)(js) == "yes"
  } yield ('name ! str)(js)
}

case class Contestant(name: String, angle: Double)

val wheel = Meetup.attendees.zipWithIndex map { case (name, i) =>
  Contestant(name, TWO_PI * i / Meetup.attendees.length)
}
var spin = 0.0
var frame = 0
val frames = 1024
def speed = {
  val top_speed = .2
  max(top_speed - .1 * tan(HALF_PI * frame / frames), 0)
}
def camera() {
  val head = frame.toFloat / frames
  val z = (512 - 512 / min(1, (head + .2))) * 2
  val x = max(0, width/2  - (width / 2 / (1-head)))
  translate(x, width/2, z)
  val rot = TWO_PI * min(head, .25)*4
  rotateY(rot)
}

def draw() {
  frame = frame + 1
  background(0)
  camera()
  rotate(spin)
  for (contestant <- wheel) {
    pushMatrix()
    rotate(contestant.angle)
    translate(200, 0)
    text(contestant.name, 0, 0)
    popMatrix()
  }
  spin = (spin + speed) % TWO_PI
  if (frame == frames)
    noLoop()
}

override def mouseClicked {
}
